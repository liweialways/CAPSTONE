# Clear environment of variables and functions
rm(list = ls(all = TRUE))
# Clear environmet of packages
if(is.null(sessionInfo()$otherPkgs) == FALSE)lapply(paste("package:", names(sessionInfo()$otherPkgs), sep=""), detach, character.only = TRUE, unload = TRUE)
hot1 <- read.csv('../raw_data/BOOKINGS_ATLCP.csv')
View(hot1)
hot1 <- read.csv('../raw_data/BOOKINGS_ATLCP.csv')
hot2 <- read.csv('../raw_data/BOOKINGS_NYCHA.csv')
# EDA only on training data
hot1$stay_dt
# EDA only on training data
max(hot1$stay_dt)
# EDA only on training data
View(hot1)
typeof(hot1$stay_dt)
as.Date(hot1$stay_dt)
as.Date(hot1$stay_dt, "%m%d%Y")
as.Date(hot1$stay_dt, "%m%d%Y")
# EDA only on training data
View(hot1)
# EDA only on training data
View(hot1)
as.Date(hot1$stay_dt, "%m/%d/%Y")
# EDA only on training data
## Change date to date type
hot1$stay_dt <- as.Date(hot1$stay_dt, "%m/%d/%Y")
hot1$booking_dt <- as.Date(hot1$booking_dt, "%m/%d/%Y")
hot2$stay_dt <- as.Date(hot2$stay_dt, "%m/%d/%Y")
hot2$booking_dt <- as.Date(hot2$booking_dt, "%m/%d/%Y")
View(hot1)
max(hot1$stay_dt)
# Clear environment of variables and functions
rm(list = ls(all = TRUE))
## Reserve last 3 weeks data as Validation Data and the prior are Training Data
max(hot1$stay_dt) - 21
# Load 2 hotel data
hot1 <- read.csv('../raw_data/BOOKINGS_ATLCP.csv')
hot2 <- read.csv('../raw_data/BOOKINGS_NYCHA.csv')
# EDA only on training data
## Change date to date type
hot1$stay_dt <- as.Date(hot1$stay_dt, "%m/%d/%Y")
hot1$booking_dt <- as.Date(hot1$booking_dt, "%m/%d/%Y")
hot2$stay_dt <- as.Date(hot2$stay_dt, "%m/%d/%Y")
hot2$booking_dt <- as.Date(hot2$booking_dt, "%m/%d/%Y")
## Reserve last 3 weeks data as Validation Data and the prior are Training Data
max(hot1$stay_dt) - 21
max(hot1$stay_dt)
## Reserve last 3 weeks data as Validation Data and the prior are Training Data
#h1_train <- hot1[hot1$stay_dt <= (max(hot1$stay_dt) - 21)]
hot1[hot1$stay_dt <= (max(hot1$stay_dt) - 21)]
## Reserve last 3 weeks data as Validation Data and the prior are Training Data
#h1_train <- hot1[hot1$stay_dt <= (max(hot1$stay_dt) - 21)]
hot1[hot1$stay_dt <= (max(hot1$stay_dt) - 21),]
## Reserve last 3 weeks data as Validation Data and the prior are Training Data
#h1_train <- hot1[hot1$stay_dt <= (max(hot1$stay_dt) - 21)]
max(hot1[hot1$stay_dt <= (max(hot1$stay_dt) - 21),]$stay_dt)
max(hot1$stay_dt)
## Reserve last 3 weeks data as Validation Data and the prior are Training Data
#h1_train <- hot1[hot1$stay_dt <= (max(hot1$stay_dt) - 21)]
hot1[hot1$stay_dt <= (max(hot1$stay_dt) - 21),]
h1_train <- hot1[hot1$stay_dt <= (max(hot1$stay_dt) - 21),]
h2_train <- hot2[hot2$stay_dt <= (max(hot2$stay_dt) - 21),]
max(h1_train$stay_dt)
max(h2_train$stay_dt)
h2_train <- hot2[hot2$stay_dt <= (max(hot2$stay_dt) - 21),]
# 1-1. Understand the patterns of cancellation rate curves. Try to see if cancellation rates are different by DOW (day of week), product types (by different levels),  month, OTB (demand volume), daily/cumulative gross bookings, daily/cumulative cancellations, price, and etc. Graphical display (plots) will be helpful to understand the patterns.
# DOW
h1_train %>%
select(day_of_week, daily_cxl_bookings, daily_gross_bookings) %>%
group_by(day_of_week) %>%
summarise(avg_bookings = mean(daily_gross_bookings),
avg_cancels = mean(daily_cxl_bookings),
sum_bookings = sum(daily_gross_bookings),
sum_cancels = sum(daily_cxl_bookings)) %>%
arrange(day_of_week) %>%
kable(align = c("c", "c", "c", "c")) %>%
kable_styling(bootstrap_options = c("striped", "condensed", "bordered")) %>%
column_spec(1:3, color = "#000000")
h1_train %>%
group_by(product_type) %>%
tally
# Clear environment of variables and functions
rm(list = ls(all = TRUE))
# Clear environmet of packages
if(is.null(sessionInfo()$otherPkgs) == FALSE)lapply(paste("package:", names(sessionInfo()$otherPkgs), sep=""), detach, character.only = TRUE, unload = TRUE)
library(tidyverse)
library(dplyr) # joins
#library(janitor) # pretty cross-tabs
library(kableExtra) # pretty html tables
library(formattable)
library(gridExtra)
library(scales)
library(pastecs)
library(GGally)
library(lubridate)
# Load 2 hotel data
hot1 <- read.csv('../raw_data/BOOKINGS_ATLCP.csv')
hot2 <- read.csv('../raw_data/BOOKINGS_NYCHA.csv')
# EDA only on training data
## Change date to date type
hot1$stay_dt <- as.Date(hot1$stay_dt, "%m/%d/%Y")
hot1$booking_dt <- as.Date(hot1$booking_dt, "%m/%d/%Y")
hot2$stay_dt <- as.Date(hot2$stay_dt, "%m/%d/%Y")
hot2$booking_dt <- as.Date(hot2$booking_dt, "%m/%d/%Y")
#create field for non-numerical dow
hot1$day_of_week <- as.factor(hot1$dow)
hot2$day_of_week <- as.factor(hot2$dow)
## Reserve last 3 weeks data as Validation Data and the prior are Training Data
h1_train <- hot1[hot1$stay_dt <= (max(hot1$stay_dt) - 21),]
h2_train <- hot2[hot2$stay_dt <= (max(hot2$stay_dt) - 21),]
# number of observations in each days_prior
h1_train %>%
select(days_prior) %>%
group_by(days_prior) %>%
tally
h1_train %>%
group_by(product_type) %>%
tally
h1_train %>%
group_by(product_type, days_prior) %>%
tally
# number of observations in each days_prior
h1_train %>%
select(days_prior) %>%
group_by(days_prior) %>%
tally
h1_train %>%
group_by(product_type) %>%
tally
h1_train %>%
group_by(product_type, days_prior) %>%
tally %>%
arrange(n)
# number of observations in each days_prior
h1_train %>%
select(days_prior) %>%
group_by(days_prior) %>%
tally
h1_train %>%
group_by(product_type) %>%
tally
h1_train %>%
select(product_type, daily_cxl_bookings)
group_by(product_type)
# number of observations in each days_prior
h1_train %>%
select(days_prior) %>%
group_by(days_prior) %>%
tally
h1_train %>%
group_by(product_type) %>%
tally
h1_train %>%
select(product_type, daily_cxl_bookings) %>%
group_by(product_type) %>%
summarize(num = n())
# number of observations in each days_prior
h1_train %>%
select(days_prior) %>%
group_by(days_prior) %>%
tally
h1_train %>%
group_by(product_type) %>%
tally
h1_train %>%
select(product_type, daily_cxl_bookings) %>%
group_by(product_type) %>%
summarize(num = sum(daily_cxl_bookings))
# number of observations in each days_prior
h1_train %>%
select(days_prior) %>%
group_by(days_prior) %>%
tally
h1_train %>%
group_by(product_type) %>%
tally
h2_train %>%
group_by(product_type) %>%
tally
h1_train %>%
select(product_type, daily_cxl_bookings) %>%
group_by(product_type) %>%
summarize(num = sum(daily_cxl_bookings))
# Clear environment of variables and functions
rm(list = ls(all = TRUE))
# Clear environmet of packages
if(is.null(sessionInfo()$otherPkgs) == FALSE)lapply(paste("package:", names(sessionInfo()$otherPkgs), sep=""), detach, character.only = TRUE, unload = TRUE)
library(tidyverse)
library(dplyr) # joins
#library(janitor) # pretty cross-tabs
library(kableExtra) # pretty html tables
library(formattable)
library(gridExtra)
library(scales)
library(pastecs)
library(GGally)
library(lubridate)
# Load 2 hotel data
hot1 <- read.csv('../raw_data/BOOKINGS_ATLCP.csv')
hot2 <- read.csv('../raw_data/BOOKINGS_NYCHA.csv')
# EDA only on training data
## Change date to date type
hot1$stay_dt <- as.Date(hot1$stay_dt, "%m/%d/%Y")
hot1$booking_dt <- as.Date(hot1$booking_dt, "%m/%d/%Y")
hot2$stay_dt <- as.Date(hot2$stay_dt, "%m/%d/%Y")
hot2$booking_dt <- as.Date(hot2$booking_dt, "%m/%d/%Y")
#create field for non-numerical dow
hot1$day_of_week <- as.factor(hot1$dow)
hot2$day_of_week <- as.factor(hot2$dow)
## Reserve last 3 weeks data as Validation Data and the prior are Training Data
h1_train <- hot1[hot1$stay_dt <= (max(hot1$stay_dt) - 21),]
h2_train <- hot2[hot2$stay_dt <= (max(hot2$stay_dt) - 21),]
head(h1_train)
# number of cancellations in each days_prior/each product type
h1_train %>%
select(days_prior, daily_cxl_bookings) %>%
group_by(days_prior) %>%
summarize(num = sum(daily_cxl_bookings))
h1_train %>%
select(product_type, daily_cxl_bookings) %>%
group_by(product_type) %>%
summarize(num = sum(daily_cxl_bookings))
# cxl rate curve
h1_train %>%
select(product_type, days_prior, cummulative_cxl_bookings, cummulative_gross_bookings) %>%
mutate(cxl_rate = cummulative_cxl_bookings/cummulative_gross_bookings)
# cxl rate curve
h1_train %>%
select(product_type, days_prior, cummulative_cxl_bookings, cummulative_gross_bookings) %>%
mutate(cxl_rate = cummulative_cxl_bookings/cummulative_gross_bookings) %>%
group_by(days_prior, product_type) %>%
summarise(avg_cxl_rate = mean(cxl_rate))
# cxl rate curve
h1_train %>%
select(product_type, days_prior, cummulative_cxl_bookings, cummulative_gross_bookings) %>%
mutate(cxl_rate = cummulative_cxl_bookings/cummulative_gross_bookings) %>%
group_by(days_prior, product_type) %>%
summarise(avg_cxl_rate = mean(cxl_rate)) %>%
ggplot()+
geom_line(aes(x=days_prior, y=avg_cxl_rate, color = product_type))
# number of bookings and cancels in each days_prior
h1_train %>%
select(days_prior, daily_gross_bookings, daily_cxl_bookings) %>%
group_by(days_prior) %>%
summarise(avg_bookings = mean(daily_gross_bookings),
avg_cancels = mean(daily_cxl_bookings),
sum_bookings = sum(daily_gross_bookings),
sum_cancels = sum(daily_cxl_bookings)) %>%
arrange(avg_cancels)
# number of bookings and cancels in each days_prior
h1_train %>%
select(days_prior, daily_gross_bookings, daily_cxl_bookings) %>%
group_by(days_prior) %>%
summarise(avg_bookings = mean(daily_gross_bookings),
avg_cancels = mean(daily_cxl_bookings),
sum_bookings = sum(daily_gross_bookings),
sum_cancels = sum(daily_cxl_bookings)) %>%
arrange(avg_cancels)
# 1-1. Understand the patterns of cancellation rate curves. Try to see if cancellation rates are different by DOW (day of week), product types (by different levels),  month, OTB (demand volume), daily/cumulative gross bookings, daily/cumulative cancellations, price, and etc. Graphical display (plots) will be helpful to understand the patterns.
# DOW
h1_train %>%
select(day_of_week, daily_cxl_bookings, daily_gross_bookings) %>%
group_by(day_of_week) %>%
summarise(avg_bookings = mean(daily_gross_bookings),
avg_cancels = mean(daily_cxl_bookings),
sum_bookings = sum(daily_gross_bookings),
sum_cancels = sum(daily_cxl_bookings)) %>%
arrange(day_of_week) %>%
kable(align = c("c", "c", "c", "c")) %>%
kable_styling(bootstrap_options = c("striped", "condensed", "bordered")) %>%
column_spec(1:3, color = "#000000")
# 1-1. Understand the patterns of cancellation rate curves. Try to see if cancellation rates are different by DOW (day of week), product types (by different levels),  month, OTB (demand volume), daily/cumulative gross bookings, daily/cumulative cancellations, price, and etc. Graphical display (plots) will be helpful to understand the patterns.
# DOW
h1_train %>%
select(day_of_week, daily_cxl_bookings, daily_gross_bookings) %>%
group_by(day_of_week) %>%
summarise(avg_bookings = mean(daily_gross_bookings),
avg_cancels = mean(daily_cxl_bookings),
sum_bookings = sum(daily_gross_bookings),
sum_cancels = sum(daily_cxl_bookings)) %>%
arrange(day_of_week) %>%
kable(align = c("c", "c", "c", "c")) %>%
kable_styling(bootstrap_options = c("striped", "condensed", "bordered")) %>%
column_spec(1:3, color = "#000000")
h1_train %>%
select(dow, days_prior, cummulative_cxl_bookings, cummulative_gross_bookings) %>%
mutate(cxl_rate = cummulative_cxl_bookings/cummulative_gross_bookings) %>%
group_by(days_prior, dow) %>%
summarise(avg_cxl_rate = mean(cxl_rate)) %>%
ggplot()+
geom_line(aes(x=days_prior, y=avg_cxl_rate, color = dow))
# 1-1. Understand the patterns of cancellation rate curves. Try to see if cancellation rates are different by DOW (day of week), product types (by different levels),  month, OTB (demand volume), daily/cumulative gross bookings, daily/cumulative cancellations, price, and etc. Graphical display (plots) will be helpful to understand the patterns.
# DOW
h1_train %>%
select(day_of_week, daily_cxl_bookings, daily_gross_bookings) %>%
group_by(day_of_week) %>%
summarise(avg_bookings = mean(daily_gross_bookings),
avg_cancels = mean(daily_cxl_bookings),
sum_bookings = sum(daily_gross_bookings),
sum_cancels = sum(daily_cxl_bookings)) %>%
arrange(day_of_week) %>%
kable(align = c("c", "c", "c", "c")) %>%
kable_styling(bootstrap_options = c("striped", "condensed", "bordered")) %>%
column_spec(1:3, color = "#000000")
h1_train %>%
select(dow, days_prior, cummulative_cxl_bookings, cummulative_gross_bookings) %>%
mutate(cxl_rate = cummulative_cxl_bookings/cummulative_gross_bookings) %>%
group_by(days_prior, dow) %>%
summarise(avg_cxl_rate = mean(cxl_rate))
# 1-1. Understand the patterns of cancellation rate curves. Try to see if cancellation rates are different by DOW (day of week), product types (by different levels),  month, OTB (demand volume), daily/cumulative gross bookings, daily/cumulative cancellations, price, and etc. Graphical display (plots) will be helpful to understand the patterns.
# DOW
h1_train %>%
select(day_of_week, daily_cxl_bookings, daily_gross_bookings) %>%
group_by(day_of_week) %>%
summarise(avg_bookings = mean(daily_gross_bookings),
avg_cancels = mean(daily_cxl_bookings),
sum_bookings = sum(daily_gross_bookings),
sum_cancels = sum(daily_cxl_bookings)) %>%
arrange(day_of_week) %>%
kable(align = c("c", "c", "c", "c")) %>%
kable_styling(bootstrap_options = c("striped", "condensed", "bordered")) %>%
column_spec(1:3, color = "#000000")
# product types
h1_train %>%
select(product_type, daily_cxl_bookings, daily_gross_bookings) %>%
group_by(product_type) %>%
summarise(avg_bookings = mean(daily_gross_bookings),
avg_cancels = mean(daily_cxl_bookings),
perc_cxl = avg_cancels/avg_bookings) %>%
arrange(perc_cxl) %>%
kable(align = c("c", "c", "c", "c")) %>%
kable_styling(bootstrap_options = c("striped", "condensed", "bordered")) %>%
column_spec(1:3, color = "#000000")
# product types
h1_train %>%
select(product_type, cummulative_gross_bookings, cummulative_cxl_bookings) %>%
mutate(cxl_rate = cummulative_cxl_bookings/cummulative_gross_bookings) %>%
group_by(product_type) %>%
summarize(avg_cxl_rate = mean(cxl_rate))
arrange(avg_cxl_rate) %>%
# product types
h1_train %>%
select(product_type, cummulative_gross_bookings, cummulative_cxl_bookings) %>%
mutate(cxl_rate = cummulative_cxl_bookings/cummulative_gross_bookings) %>%
group_by(product_type) %>%
summarize(avg_cxl_rate = mean(cxl_rate))
arrange(avg_cxl_rate)
# product types
h1_train %>%
select(product_type, cummulative_gross_bookings, cummulative_cxl_bookings) %>%
mutate(cxl_rate = cummulative_cxl_bookings/cummulative_gross_bookings) %>%
group_by(product_type) %>%
summarize(avg_cxl_rate = mean(cxl_rate)) %>%
arrange(avg_cxl_rate)
# product types
h1_train %>%
select(product_type, daily_cxl_bookings, daily_gross_bookings) %>%
group_by(product_type) %>%
summarise(avg_bookings = mean(daily_gross_bookings),
avg_cancels = mean(daily_cxl_bookings),
perc_cxl = avg_cancels/avg_bookings) %>%
arrange(perc_cxl) %>%
kable(align = c("c", "c", "c", "c")) %>%
kable_styling(bootstrap_options = c("striped", "condensed", "bordered")) %>%
column_spec(1:3, color = "#000000")
