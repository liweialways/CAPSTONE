days_prior >=22 & days_prior<=28 ~ '22_28',
days_prior >=29 ~ '29_32')) %>%
group_by(dp_range) %>%
summarise(meanAPE = mape(OTB_to_survive, fcst_svv))
tst_mase <- test %>%
filter(days_prior!=0) %>%
mutate(dp_range = case_when(days_prior >=1 & days_prior<=7 ~ '1_7',
days_prior >=8 & days_prior<=14 ~ '8_14',
days_prior >=15 & days_prior<=21 ~ '15_21',
days_prior >=22 & days_prior<=28 ~ '22_28',
days_prior >=29 ~ '29_32'),
abs_diff_1=abs(OTB_to_survive-fcst_svv),
abs_diff_2=abs(OTB_to_survive-avg_svv_rt*OTB)) %>%
group_by(dp_range) %>%
summarise(meanASE = sum(abs_diff_1)/sum(abs_diff_2))
report <- left_join(left_join(tst_mae,tst_mape, by=c("dp_range")), tst_mase, by=c("dp_range"))
report$dp_range <- factor(report$dp_range, levels = c("1_7","8_14","15_21","22_28"))
report[order(report$dp_range),]
}
h1_train <- read_csv('a_1_trn.csv')
h1_test <- read_csv('a_1_tst.csv')
eval(h1_train)
eval(h1_test)
# Function to get MAE, MAPE, MASE
eval <- function(test){
test$fcst_svv <- test$OTB - test$OTB * test$predict_cxl_rate
tst_mae <- test %>%
filter(days_prior!=0) %>%
mutate(dp_range = case_when(days_prior >=1 & days_prior<=7 ~ '1_7',
days_prior >=8 & days_prior<=14 ~ '8_14',
days_prior >=15 & days_prior<=21 ~ '15_21',
days_prior >=22 & days_prior<=28 ~ '22_28',
days_prior >=29 ~ '29_32')) %>%
group_by(dp_range) %>%
summarise(meanAE = mae(OTB_to_survive, fcst_svv))
tst_mape <- test %>%
filter(OTB_to_survive!=0, days_prior!=0) %>%
mutate(dp_range = case_when(days_prior >=1 & days_prior<=7 ~ '1_7',
days_prior >=8 & days_prior<=14 ~ '8_14',
days_prior >=15 & days_prior<=21 ~ '15_21',
days_prior >=22 & days_prior<=28 ~ '22_28',
days_prior >=29 ~ '29_32')) %>%
group_by(dp_range) %>%
summarise(meanAPE = mape(OTB_to_survive, fcst_svv))
tst_mase <- test %>%
filter(days_prior!=0) %>%
mutate(dp_range = case_when(days_prior >=1 & days_prior<=7 ~ '1_7',
days_prior >=8 & days_prior<=14 ~ '8_14',
days_prior >=15 & days_prior<=21 ~ '15_21',
days_prior >=22 & days_prior<=28 ~ '22_28',
days_prior >=29 ~ '29_32'),
abs_diff_1=abs(OTB_to_survive-fcst_svv),
abs_diff_2=abs(OTB_to_survive-avg_svv_rt*OTB)) %>%
group_by(dp_range) %>%
summarise(meanASE = sum(abs_diff_1)/sum(abs_diff_2))
report <- left_join(left_join(tst_mae,tst_mape, by=c("dp_range")), tst_mase, by=c("dp_range"))
report$dp_range <- factor(report$dp_range, levels = c("1_7","8_14","15_21","22_28","29_32"))
report[order(report$dp_range),]
}
h1_train <- read_csv('a_1_trn.csv')
h1_test <- read_csv('a_1_tst.csv')
eval(h1_train)
eval(h1_test)
# Clear environment of variables and functions
rm(list = ls(all = TRUE))
# Clear environmet of packages
if(is.null(sessionInfo()$otherPkgs) == FALSE)lapply(paste("package:", names(sessionInfo()$otherPkgs), sep=""), detach, character.only = TRUE, unload = TRUE)
library(tidyverse)
library(dplyr) # joins
#library(janitor) # pretty cross-tabs
library(kableExtra) # pretty html tables
library(formattable)
library(gridExtra)
library(scales)
library(pastecs)
library(GGally)
library(lubridate)
library(directlabels)
library(Metrics)
library(FNN)
library(MASS)
library(neuralnet)
# disable scientific notation in R
options(scipen=999)
# load the data files
hot1 <- read_csv('../BOOKINGS_ATLCP.csv')
hot2 <- read_csv('../BOOKINGS_NYCHA.csv')
# change date fields to date
hot1$stay_dt <- as.Date(hot1$stay_dt, "%m/%d/%Y")
hot1$booking_dt <- as.Date(hot1$booking_dt, "%m/%d/%Y")
hot2$stay_dt <- as.Date(hot2$stay_dt, "%m/%d/%Y")
hot2$booking_dt <- as.Date(hot2$booking_dt, "%m/%d/%Y")
#create field for non-numerical dow
hot1$day_of_week <- as.factor(hot1$dow)
hot2$day_of_week <- as.factor(hot2$dow)
# Function to get MAE, MAPE, MASE
eval <- function(test){
test$fcst_svv <- test$OTB - test$OTB * test$predict_cxl_rate
tst_mae <- test %>%
filter(days_prior!=0) %>%
mutate(dp_range = case_when(days_prior >=1 & days_prior<=7 ~ '1_7',
days_prior >=8 & days_prior<=14 ~ '8_14',
days_prior >=15 & days_prior<=21 ~ '15_21',
days_prior >=22 & days_prior<=28 ~ '22_28',
days_prior >=29 ~ '29_32')) %>%
group_by(dp_range) %>%
summarise(meanAE = mae(OTB_to_survive, fcst_svv))
tst_mape <- test %>%
filter(OTB_to_survive!=0, days_prior!=0) %>%
mutate(dp_range = case_when(days_prior >=1 & days_prior<=7 ~ '1_7',
days_prior >=8 & days_prior<=14 ~ '8_14',
days_prior >=15 & days_prior<=21 ~ '15_21',
days_prior >=22 & days_prior<=28 ~ '22_28',
days_prior >=29 ~ '29_32')) %>%
group_by(dp_range) %>%
summarise(meanAPE = mape(OTB_to_survive, fcst_svv))
tst_mase <- test %>%
filter(days_prior!=0) %>%
mutate(dp_range = case_when(days_prior >=1 & days_prior<=7 ~ '1_7',
days_prior >=8 & days_prior<=14 ~ '8_14',
days_prior >=15 & days_prior<=21 ~ '15_21',
days_prior >=22 & days_prior<=28 ~ '22_28',
days_prior >=29 ~ '29_32'),
abs_diff_1=abs(OTB_to_survive-fcst_svv),
abs_diff_2=abs(OTB_to_survive-avg_svv_rt*OTB)) %>%
group_by(dp_range) %>%
summarise(meanASE = sum(abs_diff_1)/sum(abs_diff_2))
report <- left_join(left_join(tst_mae,tst_mape, by=c("dp_range")), tst_mase, by=c("dp_range"))
report$dp_range <- factor(report$dp_range, levels = c("1_7","8_14","15_21","22_28","29_32"))
report[order(report$dp_range),]
}
# filter OTB=0, truncate the data by dp, add price, otb_cxl_rate, regrp_type, month, regrouping tags to the dataset
# day_type = 1: 'FRI/SAT/SUN'; = 0:'MON/TUE/WED/THU';
# regrp_type = 1: 'MEM/OTHER/BUS'; =0:'CORP/UNF/GRP/GOV/OP/FENC'
hot1 <- hot1 %>%
filter(OTB!=0, days_prior<33) %>%
mutate(dp_range = case_when(days_prior >=1 & days_prior<=7 ~ '1_7',
days_prior >=8 & days_prior<=14 ~ '8_14',
days_prior >=15 & days_prior<=21 ~ '15_21',
days_prior >=22 & days_prior<=28 ~ '22_28',
days_prior >=29 ~ '29_32'),
price=OTB_rev/OTB, OTB_cxl_rate = OTB_to_be_cxl/OTB,
day_type = case_when(day_of_week == '7' ~ 1,
day_of_week == '1' ~ 1,
day_of_week == '6' ~ 1,
TRUE ~ 0),
OP_FENC = case_when(product_type == 'OPAQUE' ~ 1,
product_type == 'FENCED' ~ 1,
TRUE ~ 0),
CORP_BUS = case_when(product_type == 'CORPORATE' ~ 1,
product_type == 'BUSINESS TRAVEL AGENCIES' ~ 1,
TRUE ~ 0),
MEM_OTHER = case_when(product_type == 'MEMBERSHIP MARKETING' ~ 1,
product_type == 'OTHER' ~ 1,
TRUE ~ 0),
GOV_UNFENC = case_when(product_type == 'GOVERNMENT' ~ 1,
product_type == 'UNFENCED' ~ 1,
TRUE ~ 0),
GROUP = case_when(product_type == 'GROUP' ~ 1, TRUE ~0)) %>%
filter(!is.na(price), !is.na(daily_cxl_rev), !is.na(cummulative_cxl_rev), !is.na(dp_range))
h1_train <- hot1[hot1$stay_dt <= (max(hot1$stay_dt) - 21),]
h1_test <- hot1[hot1$stay_dt > (max(hot1$stay_dt) - 21),]
nrow(h1_train)
nrow(h1_test)
# save data that can be put into python
write.csv(h1_train, "h1_train.csv")
write.csv(h1_test, "h1_test.csv")
# For MASE, use the average survival (= average survival rate of all training data * OTB) as the naive forecast.
avg_svv_rt <- sum(h1_train$OTB_to_survive)/sum(h1_train$OTB)
avg_svv_rt
# Clear environmet of packages
if(is.null(sessionInfo()$otherPkgs) == FALSE)lapply(paste("package:", names(sessionInfo()$otherPkgs), sep=""), detach, character.only = TRUE, unload = TRUE)
library(tidyverse)
library(dplyr) # joins
#library(janitor) # pretty cross-tabs
library(kableExtra) # pretty html tables
library(formattable)
library(gridExtra)
library(scales)
library(pastecs)
library(GGally)
library(lubridate)
library(directlabels)
library(Metrics)
library(FNN)
library(MASS)
#library(neuralnet)
# Clear environment of variables and functions
rm(list = ls(all = TRUE))
# Clear environmet of packages
if(is.null(sessionInfo()$otherPkgs) == FALSE)lapply(paste("package:", names(sessionInfo()$otherPkgs), sep=""), detach, character.only = TRUE, unload = TRUE)
library(tidyverse)
library(dplyr) # joins
#library(janitor) # pretty cross-tabs
library(kableExtra) # pretty html tables
library(formattable)
library(gridExtra)
library(scales)
library(pastecs)
library(GGally)
library(lubridate)
library(directlabels)
library(Metrics)
library(FNN)
library(MASS)
#library(neuralnet)
# disable scientific notation in R
options(scipen=999)
# load the data files
hot1 <- read_csv('../BOOKINGS_ATLCP.csv')
hot2 <- read_csv('../BOOKINGS_NYCHA.csv')
# change date fields to date
hot1$stay_dt <- as.Date(hot1$stay_dt, "%m/%d/%Y")
hot1$booking_dt <- as.Date(hot1$booking_dt, "%m/%d/%Y")
hot2$stay_dt <- as.Date(hot2$stay_dt, "%m/%d/%Y")
hot2$booking_dt <- as.Date(hot2$booking_dt, "%m/%d/%Y")
#create field for non-numerical dow
hot1$day_of_week <- as.factor(hot1$dow)
hot2$day_of_week <- as.factor(hot2$dow)
# Function to get MAE, MAPE, MASE
eval <- function(test){
test$fcst_svv <- test$OTB - test$OTB * test$predict_cxl_rate
tst_mae <- test %>%
filter(days_prior!=0) %>%
mutate(dp_range = case_when(days_prior >=1 & days_prior<=7 ~ '1_7',
days_prior >=8 & days_prior<=14 ~ '8_14',
days_prior >=15 & days_prior<=21 ~ '15_21',
days_prior >=22 & days_prior<=28 ~ '22_28',
days_prior >=29 ~ '29_32')) %>%
group_by(dp_range) %>%
summarise(meanAE = mae(OTB_to_survive, fcst_svv))
tst_mape <- test %>%
filter(OTB_to_survive!=0, days_prior!=0) %>%
mutate(dp_range = case_when(days_prior >=1 & days_prior<=7 ~ '1_7',
days_prior >=8 & days_prior<=14 ~ '8_14',
days_prior >=15 & days_prior<=21 ~ '15_21',
days_prior >=22 & days_prior<=28 ~ '22_28',
days_prior >=29 ~ '29_32')) %>%
group_by(dp_range) %>%
summarise(meanAPE = mape(OTB_to_survive, fcst_svv))
tst_mase <- test %>%
filter(days_prior!=0) %>%
mutate(dp_range = case_when(days_prior >=1 & days_prior<=7 ~ '1_7',
days_prior >=8 & days_prior<=14 ~ '8_14',
days_prior >=15 & days_prior<=21 ~ '15_21',
days_prior >=22 & days_prior<=28 ~ '22_28',
days_prior >=29 ~ '29_32'),
abs_diff_1=abs(OTB_to_survive-fcst_svv),
abs_diff_2=abs(OTB_to_survive-avg_svv_rt*OTB)) %>%
group_by(dp_range) %>%
summarise(meanASE = sum(abs_diff_1)/sum(abs_diff_2))
report <- left_join(left_join(tst_mae,tst_mape, by=c("dp_range")), tst_mase, by=c("dp_range"))
report$dp_range <- factor(report$dp_range, levels = c("1_7","8_14","15_21","22_28","29_32"))
report[order(report$dp_range),]
}
# Function to get MAE, MAPE, MASE
eval <- function(test){
test$fcst_svv <- test$OTB - test$OTB * test$predict_cxl_rate
tst_mae <- test %>%
filter(days_prior!=0) %>%
mutate(dp_range = case_when(days_prior >=1 & days_prior<=7 ~ '1_7',
days_prior >=8 & days_prior<=14 ~ '8_14',
days_prior >=15 & days_prior<=21 ~ '15_21',
days_prior >=22 & days_prior<=28 ~ '22_28',
days_prior >=29 ~ '29_32')) %>%
group_by(dp_range) %>%
summarise(meanAE = mae(OTB_to_survive, fcst_svv))
tst_mape <- test %>%
filter(OTB_to_survive!=0, days_prior!=0) %>%
mutate(dp_range = case_when(days_prior >=1 & days_prior<=7 ~ '1_7',
days_prior >=8 & days_prior<=14 ~ '8_14',
days_prior >=15 & days_prior<=21 ~ '15_21',
days_prior >=22 & days_prior<=28 ~ '22_28',
days_prior >=29 ~ '29_32')) %>%
group_by(dp_range) %>%
summarise(meanAPE = mape(OTB_to_survive, fcst_svv))
tst_mase <- test %>%
filter(days_prior!=0) %>%
mutate(dp_range = case_when(days_prior >=1 & days_prior<=7 ~ '1_7',
days_prior >=8 & days_prior<=14 ~ '8_14',
days_prior >=15 & days_prior<=21 ~ '15_21',
days_prior >=22 & days_prior<=28 ~ '22_28',
days_prior >=29 ~ '29_32'),
abs_diff_1=abs(OTB_to_survive-fcst_svv),
abs_diff_2=abs(OTB_to_survive-avg_svv_rt*OTB)) %>%
group_by(dp_range) %>%
summarise(meanASE = sum(abs_diff_1)/sum(abs_diff_2))
report <- left_join(left_join(tst_mae,tst_mape, by=c("dp_range")), tst_mase, by=c("dp_range"))
report$dp_range <- factor(report$dp_range, levels = c("1_7","8_14","15_21","22_28","29_32"))
report[order(report$dp_range),]
}
# filter OTB=0, truncate the data by dp, add price, otb_cxl_rate, regrp_type, month, regrouping tags to the dataset
# day_type = 1: 'FRI/SAT/SUN'; = 0:'MON/TUE/WED/THU';
# regrp_type = 1: 'MEM/OTHER/BUS'; =0:'CORP/UNF/GRP/GOV/OP/FENC'
hot1 <- hot1 %>%
filter(OTB!=0, days_prior<33) %>%
mutate(dp_range = case_when(days_prior >=1 & days_prior<=7 ~ '1_7',
days_prior >=8 & days_prior<=14 ~ '8_14',
days_prior >=15 & days_prior<=21 ~ '15_21',
days_prior >=22 & days_prior<=28 ~ '22_28',
days_prior >=29 ~ '29_32'),
price=OTB_rev/OTB, OTB_cxl_rate = OTB_to_be_cxl/OTB,
day_type = case_when(day_of_week == '7' ~ 1,
day_of_week == '1' ~ 1,
day_of_week == '6' ~ 1,
TRUE ~ 0),
OP_FENC = case_when(product_type == 'OPAQUE' ~ 1,
product_type == 'FENCED' ~ 1,
TRUE ~ 0),
CORP_BUS = case_when(product_type == 'CORPORATE' ~ 1,
product_type == 'BUSINESS TRAVEL AGENCIES' ~ 1,
TRUE ~ 0),
MEM_OTHER = case_when(product_type == 'MEMBERSHIP MARKETING' ~ 1,
product_type == 'OTHER' ~ 1,
TRUE ~ 0),
GOV_UNFENC = case_when(product_type == 'GOVERNMENT' ~ 1,
product_type == 'UNFENCED' ~ 1,
TRUE ~ 0),
GROUP = case_when(product_type == 'GROUP' ~ 1, TRUE ~0)) %>%
filter(!is.na(price), !is.na(daily_cxl_rev), !is.na(cummulative_cxl_rev), !is.na(dp_range))
h1_train <- hot1[hot1$stay_dt <= (max(hot1$stay_dt) - 21),]
h1_test <- hot1[hot1$stay_dt > (max(hot1$stay_dt) - 21),]
nrow(h1_train)
nrow(h1_test)
# save data that can be put into python
write.csv(h1_train, "h1_train.csv")
write.csv(h1_test, "h1_test.csv")
# For MASE, use the average survival (= average survival rate of all training data * OTB) as the naive forecast.
avg_svv_rt <- sum(h1_train$OTB_to_survive)/sum(h1_train$OTB)
avg_svv_rt
# Clear environment of variables and functions
rm(list = ls(all = TRUE))
#library(janitor) # pretty cross-tabs
library(kableExtra) # pretty html tables
# Clear environment of variables and functions
rm(list = ls(all = TRUE))
# Clear environmet of packages
if(is.null(sessionInfo()$otherPkgs) == FALSE)lapply(paste("package:", names(sessionInfo()$otherPkgs), sep=""), detach, character.only = TRUE, unload = TRUE)
library(tidyverse)
library(dplyr) # joins
#library(janitor) # pretty cross-tabs
library(kableExtra) # pretty html tables
library(formattable)
library(gridExtra)
library(scales)
library(pastecs)
library(GGally)
library(lubridate)
library(directlabels)
library(Metrics)
library(FNN)
library(MASS)
#library(neuralnet)
# disable scientific notation in R
options(scipen=999)
# load the data files
hot1 <- read_csv('../BOOKINGS_ATLCP.csv')
hot2 <- read_csv('../BOOKINGS_NYCHA.csv')
# change date fields to date
hot1$stay_dt <- as.Date(hot1$stay_dt, "%m/%d/%Y")
hot1$booking_dt <- as.Date(hot1$booking_dt, "%m/%d/%Y")
hot2$stay_dt <- as.Date(hot2$stay_dt, "%m/%d/%Y")
hot2$booking_dt <- as.Date(hot2$booking_dt, "%m/%d/%Y")
#create field for non-numerical dow
hot1$day_of_week <- as.factor(hot1$dow)
hot2$day_of_week <- as.factor(hot2$dow)
# Clear environment of variables and functions
rm(list = ls(all = TRUE))
# Clear environmet of packages
if(is.null(sessionInfo()$otherPkgs) == FALSE)lapply(paste("package:", names(sessionInfo()$otherPkgs), sep=""), detach, character.only = TRUE, unload = TRUE)
library(tidyverse)
library(dplyr) # joins
#library(janitor) # pretty cross-tabs
library(kableExtra) # pretty html tables
library(formattable)
library(gridExtra)
library(scales)
library(pastecs)
library(GGally)
library(lubridate)
library(directlabels)
library(Metrics)
library(FNN)
library(MASS)
#library(neuralnet)
# disable scientific notation in R
options(scipen=999)
# load the data files
hot1 <- read_csv('../BOOKINGS_ATLCP.csv')
hot2 <- read_csv('../BOOKINGS_NYCHA.csv')
# change date fields to date
hot1$stay_dt <- as.Date(hot1$stay_dt, "%m/%d/%Y")
hot1$booking_dt <- as.Date(hot1$booking_dt, "%m/%d/%Y")
hot2$stay_dt <- as.Date(hot2$stay_dt, "%m/%d/%Y")
hot2$booking_dt <- as.Date(hot2$booking_dt, "%m/%d/%Y")
#create field for non-numerical dow
hot1$day_of_week <- as.factor(hot1$dow)
hot2$day_of_week <- as.factor(hot2$dow)
# Function to get MAE, MAPE, MASE
eval <- function(test){
test$fcst_svv <- test$OTB - test$OTB * test$predict_cxl_rate
tst_mae <- test %>%
filter(days_prior!=0) %>%
mutate(dp_range = case_when(days_prior >=1 & days_prior<=7 ~ '1_7',
days_prior >=8 & days_prior<=14 ~ '8_14',
days_prior >=15 & days_prior<=21 ~ '15_21',
days_prior >=22 & days_prior<=28 ~ '22_28',
days_prior >=29 ~ '29_32')) %>%
group_by(dp_range) %>%
summarise(meanAE = mae(OTB_to_survive, fcst_svv))
tst_mape <- test %>%
filter(OTB_to_survive!=0, days_prior!=0) %>%
mutate(dp_range = case_when(days_prior >=1 & days_prior<=7 ~ '1_7',
days_prior >=8 & days_prior<=14 ~ '8_14',
days_prior >=15 & days_prior<=21 ~ '15_21',
days_prior >=22 & days_prior<=28 ~ '22_28',
days_prior >=29 ~ '29_32')) %>%
group_by(dp_range) %>%
summarise(meanAPE = mape(OTB_to_survive, fcst_svv))
tst_mase <- test %>%
filter(days_prior!=0) %>%
mutate(dp_range = case_when(days_prior >=1 & days_prior<=7 ~ '1_7',
days_prior >=8 & days_prior<=14 ~ '8_14',
days_prior >=15 & days_prior<=21 ~ '15_21',
days_prior >=22 & days_prior<=28 ~ '22_28',
days_prior >=29 ~ '29_32'),
abs_diff_1=abs(OTB_to_survive-fcst_svv),
abs_diff_2=abs(OTB_to_survive-avg_svv_rt*OTB)) %>%
group_by(dp_range) %>%
summarise(meanASE = sum(abs_diff_1)/sum(abs_diff_2))
report <- left_join(left_join(tst_mae,tst_mape, by=c("dp_range")), tst_mase, by=c("dp_range"))
report$dp_range <- factor(report$dp_range, levels = c("1_7","8_14","15_21","22_28","29_32"))
report[order(report$dp_range),]
}
# filter OTB=0, truncate the data by dp, add price, otb_cxl_rate, regrp_type, month, regrouping tags to the dataset
# day_type = 1: 'FRI/SAT/SUN'; = 0:'MON/TUE/WED/THU';
hot1 <- hot1 %>%
filter(OTB!=0, days_prior<33) %>%
mutate(dp_range = case_when(days_prior >=1 & days_prior<=7 ~ '1_7',
days_prior >=8 & days_prior<=14 ~ '8_14',
days_prior >=15 & days_prior<=21 ~ '15_21',
days_prior >=22 & days_prior<=28 ~ '22_28',
days_prior >=29 ~ '29_32'),
price=OTB_rev/OTB, OTB_cxl_rate = OTB_to_be_cxl/OTB,
day_type = case_when(day_of_week == '7' ~ 1,
day_of_week == '1' ~ 1,
day_of_week == '6' ~ 1,
TRUE ~ 0),
OP_FENC = case_when(product_type == 'OPAQUE' ~ 1,
product_type == 'FENCED' ~ 1,
TRUE ~ 0),
CORP_BUS = case_when(product_type == 'CORPORATE' ~ 1,
product_type == 'BUSINESS TRAVEL AGENCIES' ~ 1,
TRUE ~ 0),
MEM_OTHER = case_when(product_type == 'MEMBERSHIP MARKETING' ~ 1,
product_type == 'OTHER' ~ 1,
TRUE ~ 0),
GOV_UNFENC = case_when(product_type == 'GOVERNMENT' ~ 1,
product_type == 'UNFENCED' ~ 1,
TRUE ~ 0),
GROUP = case_when(product_type == 'GROUP' ~ 1, TRUE ~0)) %>%
filter(!is.na(price), !is.na(daily_cxl_rev), !is.na(cummulative_cxl_rev), !is.na(dp_range))
h1_train <- hot1[hot1$stay_dt <= (max(hot1$stay_dt) - 21),]
h1_test <- hot1[hot1$stay_dt > (max(hot1$stay_dt) - 21),]
nrow(h1_train)
nrow(h1_test)
# save data that can be put into python
write.csv(h1_train, "h1_train.csv")
write.csv(h1_test, "h1_test.csv")
# For MASE, use the average survival (= average survival rate of all training data * OTB) as the naive forecast.
avg_svv_rt <- sum(h1_train$OTB_to_survive)/sum(h1_train$OTB)
avg_svv_rt
# filter OTB=0, truncate the data by dp, add price, otb_cxl_rate, regrp_type, month, regrouping tags to the dataset
# day_type = 1: 'FRI/SAT/SUN'; = 0:'MON/TUE/WED/THU';
hot2 <- hot2 %>%
filter(OTB!=0, days_prior<32) %>%
mutate(dp_range = case_when(days_prior >=1 & days_prior<=7 ~ '1_7',
days_prior >=8 & days_prior<=14 ~ '8_14',
days_prior >=15 & days_prior<=21 ~ '15_21',
days_prior >=22 & days_prior<=28 ~ '22_28',
days_prior >=29 ~ '29_32'),
price=OTB_rev/OTB, OTB_cxl_rate = OTB_to_be_cxl/OTB,
day_type = case_when(day_of_week == '7' ~ 1,
day_of_week == '1' ~ 1,
day_of_week == '6' ~ 1,
TRUE ~ 0),
OP_FENC_OTH = case_when(product_type == 'OPAQUE' ~ 1,
product_type == 'FENCED' ~ 1,
product_type == 'OTHER' ~ 1,
TRUE ~ 0),
CORP_GROUP_TACT = case_when(product_type == 'CORPORATE' ~ 1,
product_type == 'GROUP' ~ 1,
product_type == 'TACTICAL MARKETING' ~ 1,
TRUE ~ 0),
UNF_WHOLE_MEM_BUS = case_when(product_type == 'UNFENCED' ~ 1,
product_type == 'WHOLESALE' ~ 1,
product_type == 'MEMBERSHIP MARKETING' ~ 1,
product_type == 'BUSINESS TRAVEL AGENCIES' ~ 1,
TRUE ~ 0),
GOVERNMENT = case_when(product_type == 'GOVERNMENT' ~ 1,
TRUE ~ 0)) %>%
filter(!is.na(price), !is.na(daily_cxl_rev), !is.na(cummulative_cxl_rev), !is.na(dp_range))
h2_train <- hot2[hot2$stay_dt <= (max(hot2$stay_dt) - 21),]
h2_test <- hot2[hot2$stay_dt > (max(hot2$stay_dt) - 21),]
nrow(h2_train)
nrow(h2_test)
# save data that can be put into python
write.csv(h2_train, "h2_train.csv")
write.csv(h2_test, "h2_test.csv")
# For MASE, use the average survival (= average survival rate of all training data * OTB) as the naive forecast.
avg_svv_rt <- sum(h2_train$OTB_to_survive)/sum(h2_train$OTB)
avg_svv_rt
